name: Dockerless Build CE

on:
  workflow_dispatch:
  push:
    branches:
      - non-docker-build

env:
  DEFAULT_TAG_NAME: v0.26.0

jobs:
  build_setup:
    runs-on: ubuntu-22.04
    outputs:
      tag_name: ${{ steps.set_env_variables.outputs.TAG_NAME }}
      admin_image: ${{ steps.set_env_variables.outputs.ADMIN_IMAGE }}
      web_image: ${{ steps.set_env_variables.outputs.WEB_IMAGE }}
      space_image: ${{ steps.set_env_variables.outputs.SPACE_IMAGE }}
      backend_image: ${{ steps.set_env_variables.outputs.BACKEND_IMAGE }}
      live_image: ${{ steps.set_env_variables.outputs.LIVE_IMAGE }}
    steps:
      - name: Prepare Environment
        id: set_env_variables
        run: |
          #  if the action is workflow_dispatch, then use the github.ref_name
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG_NAME=${{ github.ref_name }}
          else
            # get the selected branch/tag name and flatten it 
            TAG_NAME=${{ env.DEFAULT_TAG_NAME }}
          fi

          TAG_NAME=${TAG_NAME//\//-}

          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT

          echo "ADMIN_IMAGE=makeplane/plane-admin" >> $GITHUB_OUTPUT
          echo "WEB_IMAGE=makeplane/plane-frontend" >> $GITHUB_OUTPUT
          echo "SPACE_IMAGE=makeplane/plane-space" >> $GITHUB_OUTPUT
          echo "BACKEND_IMAGE=makeplane/plane-backend" >> $GITHUB_OUTPUT
          echo "LIVE_IMAGE=makeplane/plane-live" >> $GITHUB_OUTPUT


  build_admin:
    needs: build_setup
    runs-on: ubuntu-22.04
    steps:
      - name: Export Builder Stage Content
        run: |
          # get the selected branch/tag name and flatten it 
          IMAGE_NAME=${{ needs.build_setup.outputs.admin_image }}
          TAG_NAME=${{ needs.build_setup.outputs.tag_name }}

          # Create a temporary container from the builder stage
          CONTAINER_ID=$(docker create --platform=linux/amd64 -q ${IMAGE_NAME}:${TAG_NAME})
          
          # Create publish directory
          mkdir -p publish
          
          # Copy the /app contents from the container
          docker cp $CONTAINER_ID:/app/. publish/
          
          # Remove the temporary container
          docker rm $CONTAINER_ID
          
          # Create a tar archive
          tar -czf publish.tar.gz publish/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: admin-dist
          path: publish.tar.gz
          retention-days: 1